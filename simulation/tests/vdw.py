import math
import sys
import numpy as np
sys.path.append("/Users/ahagen/code");
from ahpy.plotting import twod as ahp
from ahpy.calc import func as ahm
from ahpy.calc import ndata as ahs

# USE SI UNITS

R = 8.3145; # Common definitions in m^3 Pa / mol K

# critical temperature in K
T_c = 457.0; # +/- 19
# critical pressure in Pa
P_c = 2070000.0; # NIST Webbook converted from 2070 +/- 880 kPa
# temperature values in K
T_val = [ 140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
  158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,
  177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,
  196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,
  215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,
  234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,
  253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,
  272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,
  291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,
  310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,
  329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,
  348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,
  367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,
  386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,
  405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,
  424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,
  443,444,445,446,447,448,449,450,451,452,453,454,455,456,457 ];
T_val = [float(i) for i in T_val];

# density values in kg/m^3
rho_val = [ 2000,1990,1990,1990,1980,1980,1970,1970,1970,1960,1960,1960,1950,1951,
  1948,1945,1942,1938,1935,1932,1929,1926,1923,1919,1916,1913,1910,1907,1904,
  1901,1898,1895,1892,1889,1886,1883,1880,1878,1875,1872,1869,1866,1863,1860,
  1858,1855,1852,1849,1847,1844,1841,1838,1836,1833,1830,1828,1825,1823,1820,
  1817,1815,1812,1810,1807,1804,1802,1799,1797,1794,1792,1789,1787,1784,1782,
  1779,1777,1774,1772,1770,1767,1765,1762,1760,1758,1755,1753,1750,1748,1746,
  1743,1741,1739,1736,1734,1732,1729,1727,1725,1722,1720,1718,1715,1713,1711,
  1708,1706,1704,1702,1699,1697,1695,1693,1690,1688,1686,1683,1681,1679,1677,
  1674,1672,1670,1668,1665,1663,1661,1658,1656,1654,1652,1649,1647,1645,1643,
  1640,1638,1636,1633,1631,1629,1626,1624,1622,1619,1617,1615,1612,1610,1608,
  1605,1603,1600.7,1598.3,1595.9,1593.5,1591.2,1588.8,1586.3,1583.9,1581.5,
  1579.1,1576.6,1574.2,1572,1569,1567,1564,1562,1559,1557,1554,1552,1549,1547,
  1544,1541,1539,1536,1534,1531,1528,1526,1523,1520,1518,1515,1512,1509,1507,
  1504,1501,1498,1495,1493,1490,1487,1484,1481,1478,1475,1472,1469,1466,1463,
  1460,1457,1454,1451,1448,1445,1441,1438,1435,1432,1428,1425,1422,1419,1415,
  1412,1408,1405,1401,1398,1394,1391,1387,1384,1380,1376,1373,1369,1365,1361,
  1357,1354,1350,1346,1342,1338,1334,1330,1326,1321,1317,1313,1309,1304,1300,
  1296,1291,1287,1282,1278,1273,1268,1264,1259,1254,1249,1244,1239,1234,1229,
  1224,1219,1213,1208,1202,1197,1191,1186,1180,1174,1168,1162,1156,1150,1144,
  1138,1131,1125,1118,1112,1105,1098,1091,1080,1080,1070,1060,1050,1050,1040,
  1030,1020,1010,1000,990,980,970,960,950,940,930,920,910,900,880,870,850,840,
  820,800,770,740,700,560 ];
rho_val = [float(i) for i in rho_val];

# uncertainty in density values in kg/m^3
u_rho = [ 130,130,130,120,120,120,120,110,110,110,110,100,100,99,97,95,93,92,90,
  88,87,85,84,82,81,80,79,78,77,76,75,74,73,73,72,71,71,70,70,70,69,69,68,68,68,
  68,67,67,67,67,67,67,66,66,66,66,66,66,66,66,65,65,65,65,65,65,65,64,64,64,64,
  64,63,63,63,63,62,62,62,61,61,61,60,60,60,59,59,58,58,57,57,56,56,55,55,54,54,
  53,52,52,51,51,50,49,49,48,47,46,46,45,44,43,43,42,41,40,39,39,38,37,36,35,34,
  33,33,32,31,30,29,28,27,26,25,24,24,23,22,21,20,19,18,17,16,16,15,14,13,12,12,
  11,10,9.6,9.1,8.7,8.4,8.2,8.1,8.1,8.3,8.5,8.9,9.3,9.8,10,11,12,12,13,14,15,15,
  16,17,18,19,19,20,21,22,23,23,24,25,26,27,27,28,29,30,30,31,32,32,33,34,34,35,
  36,36,37,38,38,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,
  49,50,50,51,51,51,52,52,53,53,53,54,54,55,55,56,56,56,57,57,58,58,59,59,60,60,
  61,61,62,63,63,64,65,65,66,67,68,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,
  84,85,87,88,89,91,92,94,95,97,98,100,100,100,100,110,110,110,110,110,110,120,
  120,120,120,120,120,120,130,130,130,130,130,130,130,140,140,140,140,150,150,
  160,250 ];
u_rho = [float(i) for i in u_rho];

rho = ahm.curve(T_val,rho_val);

M = 252.055032/1000.0; # [ kg / mol ]

T = 367.057; # [ K ]
V = M/rho.at(T); # [ kg / mol ] / [ kg / m^3 ] [=] [ m^3 / mol ]

################################### Soave ######################################

omega = 0.5205;
T_r = np.divide(T,T_c);
print T_r;
# Soave uses different definitions for kappa and alpha
kappa = 0.480 + 1.574 * omega - 0.176 * np.power(omega,2.0);
alpha = np.power((1.0 + kappa * (1.0-np.sqrt(T_r))),2.0);
a = (0.42747 * (np.power(R,2.0) * np.power(T_c,2.0) / P_c)) * alpha;
b = 0.08664 * (R * T_c / P_c);
P = ((R*T)/(V-b)) - (a/(np.power(V,2.0) + 2.0*b*V - np.power(b,2.0)));

print '---------- Soave -------------';
print "P(%f K, %f kg/m^3) = %e Pa" % (T,rho.at(T),P);


################################### PRSV #######################################

# We get the kappa, alpha, and kappa_0 definitions from Stryjek
kappa_1 = 0.0;      # Stryjek for T_r > 0.7

kappa_0 = 0.378893 + 1.4897153*omega - 0.17131848 * np.power(omega,2.0) + \
    0.0196554 * np.power(omega,3.0);
kappa = kappa_0 + kappa_1 * (1.0 - np.sqrt(T_r)) * (0.7 - T_r);
alpha = np.power((1.0 + kappa * (1.0-np.sqrt(T_r))),2.0);
a = (0.457235 * (np.power(R,2.0) * np.power(T_c,2.0) / P_c)) * alpha;
b = 0.077796 * (R * T_c / P_c);
P = ((R*T)/(V-b)) - (a/(np.power(V,2.0) + 2.0*b*V - np.power(b,2.0)));

print '---------- Stryjek -------------';
print "P(%f K, %f kg/m^3) = %e Pa" % (T,rho.at(T),P);
